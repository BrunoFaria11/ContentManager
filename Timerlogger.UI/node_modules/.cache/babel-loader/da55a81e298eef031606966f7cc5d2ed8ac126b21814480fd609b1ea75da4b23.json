{"ast":null,"code":"import { ProjectModel } from \"../models/ProjectModel\";\nconst BASE_URL = \"https://localhost:3001/api\";\nexport async function getAll(projectId) {\n  const response = await fetch(`${BASE_URL}/TimerHistory/GetAllProjects?ProjectId=${projectId}`);\n  return response.json();\n}\nexport async function postProject(projectId, startDate, endDate) {\n  const project = new TimeHistoryModel(\"\", name, deadLine, timePerWeek, 0, false);\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(project)\n  };\n  const response = await fetch(`${BASE_URL}/TimerHistory`, requestOptions);\n  const data = await response.json();\n  return data;\n}\nexport async function editProject(id, name, deadLine, timePerWeek, isCompleted) {\n  const project = new ProjectModel(id, name, deadLine, timePerWeek, 0, isCompleted);\n  const requestOptions = {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(project)\n  };\n  const response = await fetch(`${BASE_URL}/TimerHistory`, requestOptions);\n  const data = await response.json();\n  return data;\n}","map":{"version":3,"names":["ProjectModel","BASE_URL","getAll","projectId","response","fetch","json","postProject","startDate","endDate","project","TimeHistoryModel","name","deadLine","timePerWeek","requestOptions","method","headers","body","JSON","stringify","data","editProject","id","isCompleted"],"sources":["/Users/brunofaria/Documents/Projects/Visma/bruno/Timerlogger.UI/src/app/api/timeHistory.ts"],"sourcesContent":["import { ProjectModel } from \"../models/ProjectModel\";\n\nconst BASE_URL = \"https://localhost:3001/api\";\n\nexport async function getAll(projectId : string) {\n  const response = await fetch(`${BASE_URL}/TimerHistory/GetAllProjects?ProjectId=${projectId}`);\n  return response.json();\n}\n\nexport async function postProject(\n  projectId: String,\n  startDate: Date,\n  endDate: Date\n) {\n  const project = new TimeHistoryModel(\"\", name, deadLine, timePerWeek, 0, false);\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(project),\n  };\n  const response = await fetch(`${BASE_URL}/TimerHistory`, requestOptions);\n  const data = await response.json();\n  return data;\n}\n\nexport async function editProject(\n    id:String,\n    name: String,\n    deadLine: Date,\n    timePerWeek: Number,\n    isCompleted: boolean\n  ) {\n    const project = new ProjectModel(id, name, deadLine, timePerWeek, 0, isCompleted);\n    const requestOptions = {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(project),\n    };\n    const response = await fetch(`${BASE_URL}/TimerHistory`, requestOptions);\n    const data = await response.json();\n    return data;\n  }\n  "],"mappings":"AAAA,SAASA,YAAY,QAAQ,wBAAwB;AAErD,MAAMC,QAAQ,GAAG,4BAA4B;AAE7C,OAAO,eAAeC,MAAMA,CAACC,SAAkB,EAAE;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,0CAAyCE,SAAU,EAAC,CAAC;EAC9F,OAAOC,QAAQ,CAACE,IAAI,EAAE;AACxB;AAEA,OAAO,eAAeC,WAAWA,CAC/BJ,SAAiB,EACjBK,SAAe,EACfC,OAAa,EACb;EACA,MAAMC,OAAO,GAAG,IAAIC,gBAAgB,CAAC,EAAE,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,WAAW,EAAE,CAAC,EAAE,KAAK,CAAC;EAC/E,MAAMC,cAAc,GAAG;IACrBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,OAAO;EAC9B,CAAC;EACD,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,eAAc,EAAEc,cAAc,CAAC;EACxE,MAAMM,IAAI,GAAG,MAAMjB,QAAQ,CAACE,IAAI,EAAE;EAClC,OAAOe,IAAI;AACb;AAEA,OAAO,eAAeC,WAAWA,CAC7BC,EAAS,EACTX,IAAY,EACZC,QAAc,EACdC,WAAmB,EACnBU,WAAoB,EACpB;EACA,MAAMd,OAAO,GAAG,IAAIV,YAAY,CAACuB,EAAE,EAAEX,IAAI,EAAEC,QAAQ,EAAEC,WAAW,EAAE,CAAC,EAAEU,WAAW,CAAC;EACjF,MAAMT,cAAc,GAAG;IACrBC,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,OAAO;EAC9B,CAAC;EACD,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,eAAc,EAAEc,cAAc,CAAC;EACxE,MAAMM,IAAI,GAAG,MAAMjB,QAAQ,CAACE,IAAI,EAAE;EAClC,OAAOe,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}