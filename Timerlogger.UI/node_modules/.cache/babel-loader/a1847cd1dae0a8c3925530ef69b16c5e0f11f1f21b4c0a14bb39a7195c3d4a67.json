{"ast":null,"code":"import { ProjectModel } from \"../models/ProjectModel\";\nconst BASE_URL = \"https://localhost:3001/api\";\nexport async function getAll(isToOrder) {\n  const response = await fetch(`${BASE_URL}/Projects/GetAllProjects?IsToSortDesc=${isToOrder}`);\n  return response.json();\n}\nexport async function postProject(name, deadLine, timePerWeek) {\n  const project = new ProjectModel(\"\", name, deadLine, timePerWeek, 0, false);\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(project)\n  };\n  let response = await fetch(`${BASE_URL}/Projects`, requestOptions);\n  if (!response.ok) {\n    response = await response.json();\n  }\n  return response;\n}\nexport async function editProject(id, name, deadLine, timePerWeek, isCompleted) {\n  const project = new ProjectModel(id, name, deadLine, timePerWeek, 0, isCompleted);\n  const requestOptions = {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(project)\n  };\n  const response = await fetch(`${BASE_URL}/Projects`, requestOptions);\n  return response;\n}","map":{"version":3,"names":["ProjectModel","BASE_URL","getAll","isToOrder","response","fetch","json","postProject","name","deadLine","timePerWeek","project","requestOptions","method","headers","body","JSON","stringify","ok","editProject","id","isCompleted"],"sources":["/Users/brunofaria/Documents/Projects/Visma/bruno/Timerlogger.UI/src/app/api/projects.ts"],"sourcesContent":["import { ProjectModel } from \"../models/ProjectModel\";\n\nconst BASE_URL = \"https://localhost:3001/api\";\n\nexport async function getAll(isToOrder: boolean) {\n  const response = await fetch(\n    `${BASE_URL}/Projects/GetAllProjects?IsToSortDesc=${isToOrder}`\n  );\n  return response.json();\n}\n\nexport async function postProject(\n  name: String,\n  deadLine: Date,\n  timePerWeek: Number\n) {\n  const project = new ProjectModel(\"\", name, deadLine, timePerWeek, 0, false);\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(project),\n  };\n  let response = await fetch(`${BASE_URL}/Projects`, requestOptions);\n  if(!response.ok){\n    response = await response.json();\n  }\n  return response;\n}\n\nexport async function editProject(\n  id: String,\n  name: String,\n  deadLine: Date,\n  timePerWeek: Number,\n  isCompleted: boolean\n) {\n  const project = new ProjectModel(\n    id,\n    name,\n    deadLine,\n    timePerWeek,\n    0,\n    isCompleted\n  );\n  const requestOptions = {\n    method: \"PATCH\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(project),\n  };\n  const response = await fetch(`${BASE_URL}/Projects`, requestOptions);\n  return response;\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,wBAAwB;AAErD,MAAMC,QAAQ,GAAG,4BAA4B;AAE7C,OAAO,eAAeC,MAAMA,CAACC,SAAkB,EAAE;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEJ,QAAS,yCAAwCE,SAAU,EAAC,CAChE;EACD,OAAOC,QAAQ,CAACE,IAAI,EAAE;AACxB;AAEA,OAAO,eAAeC,WAAWA,CAC/BC,IAAY,EACZC,QAAc,EACdC,WAAmB,EACnB;EACA,MAAMC,OAAO,GAAG,IAAIX,YAAY,CAAC,EAAE,EAAEQ,IAAI,EAAEC,QAAQ,EAAEC,WAAW,EAAE,CAAC,EAAE,KAAK,CAAC;EAC3E,MAAME,cAAc,GAAG;IACrBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO;EAC9B,CAAC;EACD,IAAIP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,WAAU,EAAEW,cAAc,CAAC;EAClE,IAAG,CAACR,QAAQ,CAACc,EAAE,EAAC;IACdd,QAAQ,GAAG,MAAMA,QAAQ,CAACE,IAAI,EAAE;EAClC;EACA,OAAOF,QAAQ;AACjB;AAEA,OAAO,eAAee,WAAWA,CAC/BC,EAAU,EACVZ,IAAY,EACZC,QAAc,EACdC,WAAmB,EACnBW,WAAoB,EACpB;EACA,MAAMV,OAAO,GAAG,IAAIX,YAAY,CAC9BoB,EAAE,EACFZ,IAAI,EACJC,QAAQ,EACRC,WAAW,EACX,CAAC,EACDW,WAAW,CACZ;EACD,MAAMT,cAAc,GAAG;IACrBC,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO;EAC9B,CAAC;EACD,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,WAAU,EAAEW,cAAc,CAAC;EACpE,OAAOR,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}